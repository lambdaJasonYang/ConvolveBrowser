import Head from "next/head";
import Image from "next/image";
import { StubNavbar } from "../components/specific/StubNavbar";

// import { Valid } from "../components/Validation";
// import { List, ListItem } from "../components/List";
import { MainGrid, SideCol, ContentCol } from "../components/LayoutA";
// import NavDropDownItem from '../components/NavBar/NavDropDownItem'
// import Alert from "../components/Alert";
import { Card } from "../components/Card";
import { Button } from "../components/Button";
import { useRef, useState } from "react";
// import styles from '../styles/Home.module.css'
import * as tf from "@tensorflow/tfjs";

const FileDialog = ({ fileCallback }: any): any => {
  const myfileRef = useRef();
  const handleFileChange = (e: Event): void => {
    const mytarget: HTMLInputElement = e.target as HTMLInputElement;
    console.log(mytarget.files);
    fileCallback(mytarget.files[0]);
  };
  return (
    <>
      <input type="file" ref={myfileRef} onChange={handleFileChange} />
    </>
  );
};

export default function Playground(): any {
  const [myurl, setmyurl] = useState("");
  const mycanv = useRef();

  const mycallback = async (fobj) => {
    const image = document.createElement("img");

    const reader = new FileReader();
    reader.addEventListener("load", async () => {
      setmyurl(() => reader.result); // console.log(reader.result);
      image.src = reader.result;
      console.log(image);

      image.onload = async () => {
        const loadedtfFile = await tf.browser.fromPixelsAsync(image);
        console.log("Ay:", loadedtfFile.shape);
        // const myinput = tf.cast(loadedtfFile,'float32').pt
        const b = tf.scalar(255);
        const myinput = tf.cast(loadedtfFile.div(b), "float32");
        // console.log(await myinput.data())
        // const kernFilter = tf.tensor4d([[[[-1.0, -1, -1], [2, 2, 2],[-1, -1, -1]]]]).reshape([3,3,1,1])
        // const kernFilter = tf.randomNormal([3,3,3,1],2,2,"float32")
        // const kernFilter = tf.rand([3,3,3,1],()=>Math.random(),'float32')
        // const kernFilter = tf.tensor4d([[[[-1,-1,-1],[2,2,2],[-1,-1,-1]]], [[[-1,-1,-1],[2,2,2],[-1,-1,-1]]], [[[-1,-1,-1],[2,2,2],[-1,-1,-1]]]],[3,3,3,1],"float32")

        // const kernFilter = tf.tensor4d([-1,-1,-1,2,2,2,-1,-1,-1, -1,-1,-1,2,2,2,-1,-1,-1, -1,-1,-1,2,2,2,-1,-1,-1],[3,3,3,1],"float32")

        const hFilter = tf.tensor4d([
          [
            [[-1], [-1], [-1]],
            [[-1], [-1], [-1]],
            [[-1], [-1], [-1]],
          ],
          [
            [[2], [2], [2]],
            [[2], [2], [2]],
            [[2], [2], [2]],
          ],
          [
            [[-1], [-1], [-1]],
            [[-1], [-1], [-1]],
            [[-1], [-1], [-1]],
          ],
        ]);
        const kernFilter = tf.tensor4d([
          [
            [[-1], [-1], [-1]],
            [[2], [2], [2]],
            [[-1], [-1], [-1]],
          ],
          [
            [[-1], [-1], [-1]],
            [[2], [2], [2]],
            [[-1], [-1], [-1]],
          ],
          [
            [[-1], [-1], [-1]],
            [[2], [2], [2]],
            [[-1], [-1], [-1]],
          ],
        ]);
        console.log("kfilter", kernFilter.print());
        const newShit = tf.conv2d(myinput, kernFilter, 1, 1).clipByValue(0, 1);
        console.log("By:", newShit);
        tf.browser.toPixels(newShit, mycanv.current);
      };
    });

    reader.readAsDataURL(fobj); // this runs the callback above but returns nothing
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <StubNavbar />

      <MainGrid>
        <SideCol>
          <Card />
        </SideCol>
        <ContentCol>
          <canvas
            ref={mycanv}
            id="myCanvas"
            className="border border-primary col-md-11 float-md-start ms-md-3"
          />
          <img src={myurl} alt="Image preview" />
          <FileDialog fileCallback={mycallback} />
          <p>hi</p>
          <Button label={"ha"} onClick={undefined} />
          <Button label={"ha"} onClick={undefined} />
          <Button label={"ha"} onClick={undefined} />
        </ContentCol>
        <footer className="footer">
          <a
            href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Powered by{" "}
            <span className="logo">
              <Image
                src="/vercel.svg"
                alt="Vercel Logo"
                width={72}
                height={16}
              />
            </span>
          </a>
        </footer>
      </MainGrid>
    </>
  );
}
